# application.yml
--- 
spring: 
  application: 
    name: orderservice
  datasource:
    url: jdbc:postgresql://db-order-service:5432/postgres
    username: postgres
    password: ordermanager

  jpa:
    # fa il logging dei comandi sql eseguiti
    # show-sql: true
    # disable OSIV
    open-in-view: false
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # CONSUL 
  cloud:
    consul:
      host: consul
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 45s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true
        prefer-ip-address: true
    loadbalancer: 
      ribbon.enabled: false 

server: 
  port: ${PORT:${SERVER_PORT:0}}
#  port: 8080
#  port: 8081 
  # per swagger dietro un api gateway 
  forward-headers-strategy: framework


